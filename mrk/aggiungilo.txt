
### extract and validate sequences from FASTA --------------------------------

library(stringr)
library(Biostrings)

### define START and STOP codons
strStartCod <- c("ATG")
strStopCods <- c("TAA", "TAG", "TGA")

### genome path base
dirGenomes <- "/Users/Lorenzo/data/nano-assemblies-pansn-2024/genomes/"
pathFaFrom <- function(haplo, coord) {
  file.path(dirGenomes, "diploid-phased", paste0(haplo, "-genome.fa.gz"))
}

# helper: extract sequence using samtools
get_sequence <- function(fa_path, region) {
  cmd <- sprintf("samtools faidx %s '%s'", shQuote(fa_path), region)
  res <- system(cmd, intern = TRUE)
  if (length(res) <= 1) return(NA)
  paste(res[-1], collapse = "")
}

# helper: check coding conditions
is_valid_coding <- function(seq) {
  if (nchar(seq) %% 3 != 0) return(FALSE)
  codons <- str_sub(seq, seq(1, nchar(seq), 3), seq(3, nchar(seq), 3))
  if (!(codons[1] %in% strStartCod)) return(FALSE)
  if (!(codons[length(codons)] %in% strStopCods)) return(FALSE)
  if (any(codons[-length(codons)] %in% strStopCods)) return(FALSE)
  return(TRUE)
}

# process each row
dtPanFeatsGns[, c("N_total", "N_invalid") := .(0, 0)]

for (i in seq_len(nrow(dtPanFeatsGns))) {
  row <- dtPanFeatsGns[i]
  feats <- unlist(strsplit(row$Features_id, ","))
  feat_prefix <- sub(",.*", "", row$Features_id)
  sblock_file <- file.path(dirBase, paste0(row$Sblock_type, "-", feat_prefix, ".fa"))
  
  for (col_name in names(row)) {
    if (!grepl("#", col_name)) next
    elements <- unlist(strsplit(row[[col_name]], ";"))
    if (length(elements) == 0 || all(is.na(elements))) next

    for (el in elements) {
      if (is.na(el) || el == "") next
      row$N_total <- row$N_total + 1
      seq <- get_sequence(pathFaFrom(col_name, el), el)
      tag <- paste0(col_name, "#", el)
      
      if (!is.na(seq) && is_valid_coding(seq)) {
        cat(sprintf(">%s\n%s\n", tag, seq), file = sblock_file, append = TRUE)
      } else {
        rc_seq <- as.character(reverseComplement(DNAString(seq)))
        tag_rc <- paste0(col_name, "#RC:", el)
        if (!is.na(rc_seq) && is_valid_coding(rc_seq)) {
          cat(sprintf(">%s\n%s\n", tag_rc, rc_seq), file = sblock_file, append = TRUE)
        } else {
          el_tagged <- paste0("inv#", el)
          row[[col_name]] <- gsub(el, el_tagged, row[[col_name]], fixed = TRUE)
          row$N_invalid <- row$N_invalid + 1
        }
      }
    }
  }
  dtPanFeatsGns[i, c("N_total", "N_invalid") := list(row$N_total, row$N_invalid)]
}